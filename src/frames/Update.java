/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import java.io.IOException;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import main.Book;
import main.FileManager;
import static main.FileManager.fileWriter;
import static main.Library.inventory;

/**
 *
 * @author Joan Ye
 */
public class Update extends javax.swing.JFrame {

    /**
     * Creates new form Update
     */
    public Update() {
        super("Update student");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        jTxtareaDeleteList.setEditable(false);
        String list = "";
        try {
            list = FileManager.fileReader();
        } catch (IOException ex) {
            System.err.println("Error while reading the file.");
        } catch (NullPointerException ex) {
            System.out.println("- The file doesn't have data -");
        }
        jTxtareaDeleteList.setText(list);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblUpdate = new javax.swing.JLabel();
        jBtnReturn = new javax.swing.JButton();
        jLblTitle = new javax.swing.JLabel();
        jBtnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtareaDeleteList = new javax.swing.JTextArea();
        jTxtTitle = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(500, 200));

        jLblUpdate.setFont(new java.awt.Font("Segoe UI Black", 1, 48)); // NOI18N
        jLblUpdate.setText("UPDATE BOOK");

        jBtnReturn.setBackground(new java.awt.Color(40, 40, 40));
        jBtnReturn.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jBtnReturn.setForeground(new java.awt.Color(255, 255, 255));
        jBtnReturn.setText("Return");
        jBtnReturn.setFocusPainted(false);
        jBtnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReturnActionPerformed(evt);
            }
        });

        jLblTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLblTitle.setText("Title");

        jBtnSubmit.setBackground(new java.awt.Color(0, 153, 255));
        jBtnSubmit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jBtnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        jBtnSubmit.setText("Submit");
        jBtnSubmit.setFocusPainted(false);
        jBtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSubmitActionPerformed(evt);
            }
        });

        jTxtareaDeleteList.setColumns(20);
        jTxtareaDeleteList.setRows(5);
        jScrollPane1.setViewportView(jTxtareaDeleteList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(jBtnSubmit))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jBtnReturn)
                            .addGap(18, 18, 18)
                            .addComponent(jLblUpdate)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jBtnReturn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLblUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblTitle)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSubmit))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReturnActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jBtnReturnActionPerformed

    private void jBtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSubmitActionPerformed
        if (!jTxtTitle.getText().equals("")) {
            Iterator it = inventory.keySet().iterator();
            //Variables
            String key = "";
            boolean found = false;
            Book addBook = new Book(jTxtTitle.getText());
            Book inventoryBook;
            // Verify if the book exists
            while (it.hasNext()) {
                key = (String) it.next();
                inventoryBook = inventory.get(key);
                if (inventoryBook.equals(addBook)) {
                    found = true;
                    break;
                }
            }
            // Update the book if it is found and ask for new info
            if (found) {
                boolean correctData = false;
                double newPrice = 0;
                int newQuantity = 0;
                do {
                    try {
                        newPrice = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter the new price", "New Price", JOptionPane.QUESTION_MESSAGE));
                        if (newPrice <= 0) {
                            correctData = false;
                            JOptionPane.showMessageDialog(this, "The price can't be negative or 0.", "WARNING", JOptionPane.WARNING_MESSAGE);
                        } else {
                            correctData = true;
                        }
                    } catch (NullPointerException e) {
                        JOptionPane.showMessageDialog(this, "Enter a price.", "WARNING", JOptionPane.WARNING_MESSAGE);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Incorrect format of the price. Ex:(4.99)", "WARNING", JOptionPane.WARNING_MESSAGE);
                    }
                } while (!correctData);
                correctData = false;
                do {
                    try {
                        newQuantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter the new quantity.", "New Quantity", JOptionPane.QUESTION_MESSAGE));
                        if (newQuantity < 0) {
                            correctData = false;
                            JOptionPane.showMessageDialog(this, "The quantity can't be negative.", "WARNING", JOptionPane.WARNING_MESSAGE);
                        } else {
                            correctData = true;
                        }
                    } catch (NullPointerException e) {
                        JOptionPane.showMessageDialog(this, "Enter a quantity.", "WARNING", JOptionPane.WARNING_MESSAGE);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Incorrect format of the quantity. (Only numbers)", "WARNING", JOptionPane.WARNING_MESSAGE);
                    }
                } while (!correctData);
                if (correctData) {
                    // Change the values of price and quantity
                    inventory.get(key).setPrice(newPrice);
                    inventory.get(key).setQuantity(newQuantity);
                    // Save the changes in the file
                    Menu menu = new Menu();
                    try {
                        fileWriter();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error while updateing the book.", "WARNING", JOptionPane.WARNING_MESSAGE);
                        menu.setVisible(true);
                        this.setVisible(false);
                    }
                    JOptionPane.showMessageDialog(this, "The book has updated.", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                    menu.setVisible(true);
                    this.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Error while updateing the book.", "WARNING", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "This book doesn't exist.", "WARNING", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter a title.", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jBtnSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Update().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnReturn;
    private javax.swing.JButton jBtnSubmit;
    private javax.swing.JLabel jLblTitle;
    private javax.swing.JLabel jLblUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtTitle;
    private javax.swing.JTextArea jTxtareaDeleteList;
    // End of variables declaration//GEN-END:variables
}
